[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Introduction to mermaid.js\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 30, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\n  \n\n\n\n\nUsing the NBA API in R\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 23, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Patrick Coyle",
    "section": "",
    "text": "Patrick Coyle’s webpage.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus in nulla sed justo dictum imperdiet a id nibh. Duis faucibus sed enim nec accumsan. Mauris ut tempus sapien. In hac habitasse platea dictumst. Aenean congue tellus imperdiet est imperdiet, a egestas arcu porta. Nunc et bibendum nibh, ut consectetur lacus. Mauris hendrerit faucibus orci sed malesuada. Maecenas eros dolor, mollis sit amet laoreet scelerisque, ultrices eu lectus. Donec mattis, est sed ultricies congue, arcu odio placerat turpis, rutrum mattis magna turpis id mauris. Morbi quis felis sodales ex ornare mollis quis in dolor. Sed sagittis, nunc vitae consectetur commodo, quam lectus rutrum risus, vitae dignissim erat arcu sit amet sapien. Aliquam rhoncus, risus suscipit laoreet ultricies, diam tortor interdum velit, et porttitor lectus justo nec metus.\nProin nibh nibh, ornare vitae quam at, pellentesque euismod urna. Donec vel iaculis felis. Donec libero mi, sagittis ac libero ornare, accumsan molestie eros. Vivamus mollis ac mauris eu ultricies. Sed et elit vestibulum, bibendum est sit amet, placerat magna. Sed placerat orci sed diam porta, eu sollicitudin nisi fringilla. Curabitur ut commodo odio. Ut bibendum, urna sollicitudin malesuada aliquam, odio mi maximus purus, a congue libero purus in nisi. Mauris nisi nibh, elementum sed ornare vitae, efficitur ac tortor. Donec sit amet diam in tellus mollis iaculis. Phasellus quis suscipit dui, ut tristique lorem. Vivamus sed erat non magna congue ornare a a urna. Mauris pulvinar erat et odio sollicitudin, ac fermentum nisl viverra. Phasellus congue, magna vitae aliquam maximus, metus ante tincidunt nisi, eget bibendum tellus sapien eu lorem. Vivamus vestibulum nulla mi, vel faucibus nisi rhoncus in. Nulla pellentesque felis a imperdiet pharetra.\nCurabitur nunc urna, malesuada vitae lectus eget, egestas facilisis nisl. Cras bibendum erat id tincidunt pretium. Suspendisse cursus placerat tellus, non consectetur lacus ultrices in. Quisque eget libero vitae enim ultricies condimentum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed interdum erat ut pulvinar eleifend. In eu magna sed lacus convallis laoreet ac in eros. Nulla cursus porttitor feugiat.\nInteger laoreet, tortor et congue egestas, dolor arcu finibus lorem, eu porttitor felis ante at mauris. Praesent pellentesque orci in condimentum aliquet. Cras facilisis faucibus ex, sit amet euismod est placerat vitae. Morbi rhoncus ullamcorper finibus. Sed eget ullamcorper nisl, vel efficitur neque. Sed at massa gravida, accumsan felis fringilla, accumsan lectus. Duis non odio mollis, eleifend felis vel, lobortis tortor. Pellentesque imperdiet eros quis porta fringilla. Praesent at dapibus quam.\nDonec sed nisi lectus. Cras at velit cursus metus tempus vestibulum nec quis sapien. Cras vestibulum suscipit volutpat. Fusce sapien ante, porta non scelerisque sit amet, dictum at massa. In quis condimentum leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi posuere magna a risus consectetur convallis. Donec sagittis elit non leo vulputate, id ultrices mi hendrerit."
  },
  {
    "objectID": "posts/mermaid_intro_20230430/index.html",
    "href": "posts/mermaid_intro_20230430/index.html",
    "title": "Introduction to mermaid.js",
    "section": "",
    "text": "mermaid.js is a Javascript library that allows you to create diagrams by writing “Markdown-ish syntax.” It has native support in Quarto:\n\ngraph LR\nA[Hard edge] --> B(Round edge)\nB --> C{Decision}\nC --> D[Result one]\nC --> E[Result two]\n\n\n\ngraph LR\nA[Hard edge] --> B(Round edge)\nB --> C{Decision}\nC --> D[Result one]\nC --> E[Result two]\n\n\n\n\n\n\n\n\nHere is mermaid template for the 2023 NBA Playoffs (excluding the play-in tournament)1\n\nlibrary(dplyr, warn.conflicts = FALSE) # to load the magrittr pipe\nmy_mmd <- \"playoffs_template1.mmd\" %>%\n  readLines(warn = F) \nmy_mmd %>%\n  paste(collapse = \"\\n\") %>%\n  DiagrammeR::mermaid()\n\n\n\n\n\nWe can progammatically edit this template with data about the teams and games:\n\nlibrary(readr)\nlibrary(stringr)\nseed_xwalk <- read_csv(\"nba_2023_seed_xwalk.csv\", na = \"\")\nhelper1_20230423 <- function (mmd) {\n  mmd[-1] %>%\n  str_trim() %>% \n  str_split(\" --> \", simplify = T) %>% \n  as_tibble() %>% \n  setNames(c(\"From\", \"To\")) %>% \n  left_join(seed_xwalk, by = c(\"From\" = \"seed\")) %>% \n  transmute(\n    new_edges = paste0(\"  \", \n                       case_when(!is.na(team_stub) ~ team_stub, T ~ From), \n                       \" --> \", \n                       To)\n  ) %>% \n  pull(new_edges) %>% \n  c(mmd[1], .) \n}\nmy_mmd %>% \n  helper1_20230423() %>% \n  paste(collapse = \"\\n\") %>%\n  DiagrammeR::mermaid()\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nDiagrammeR::mermaid() does not appear to support every Mermaid diagram syntax, such as flowcharts. But the flowchart syntax can be manually entered into a Quarto mermaid code chunk.↩︎"
  },
  {
    "objectID": "posts/nba_api_20230423/index.html",
    "href": "posts/nba_api_20230423/index.html",
    "title": "Using the NBA API in R",
    "section": "",
    "text": "nba_api is a Python client for accessing data from www.nba.com. This post presents an example of using nba_api to create a data viz. This example begins by using reticulate::import() to import nba_api. Before doing this, we must:\n\nInstall Python and configure R to use Python using the reticulate package;\nInstall nba_api in Python.\n\nA minimal working example for this setup would be useful. I do not have one, because my process involved the Anaconda GUI and so it is not reproducible.\nFor data viz, we use the nbaplotR package, which provides a ggplot2 geom for plotting NBA and WNBA logos. This package is not available on CRAN – the developer recommends installing from Github using pak::pak():\n\nif (!require(\"pak\")) install.packages(\"pak\")\npak::pak(\"mrcaseb/nbaplotR\")\n\n\n# Load R packages and Python modules ------\nlibrary(reticulate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(nbaplotR)\nnba_api <- reticulate::import(\"nba_api\")\nLeagueDashTeamStats <- nba_api$stats$endpoints$leaguedashteamstats$LeagueDashTeamStats\n\n# Pull and wrangle data from nba.com ------\nmy_df1 <- LeagueDashTeamStats(\n  season = '2022-23',\n  season_type_all_star = 'Regular Season'\n)$get_data_frames()[[1]] %>% \n  mutate(\n    TEAM_ABBR = valid_team_names(\"NBA\")[c(1, 3, 2, 4:25, 27, 26, 28:30)]\n  )\n\n# Plot data ------\nmy_ggobj <- my_df1 %>% \n  ggplot(aes(x = REB, y = PTS)) +\n  geom_nba_logos(\n    aes(team_abbr = TEAM_ABBR), \n    width = 0.075,\n    height = 0.075\n  ) +\n  theme_bw()\ngirafe(ggobj = my_ggobj)"
  }
]