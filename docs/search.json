[
  {
    "objectID": "stuff_that_i_like.html",
    "href": "stuff_that_i_like.html",
    "title": "Stuff That I Like",
    "section": "",
    "text": "Websites and Blogs\n\nThe Posit Blog\nThe Good Docs Project\nCRAN Task View: Reproducible Research\nAlbert Rapp’s blog - an exemplary Quarto blog, focused on data science education.\nNicola Rennie’s blog\nFree PDF Compressor - a free simple desktop application for compressing PDFs.\n\n\n\nBooks about R\nI recommend the four textbooks on R co-authored by Hadley Wickham, which are available for free as e-books (published using quarto or bookdown):\n\n\nR for Data Science, with Garrett Grolemund, is the place to start if you want to learn how to do data science with R.\nggplot2: elegant graphics for data analysis shows you how to use ggplot2 to create graphics that help you understand your data.\nAdvanced R helps you master R as a programming language, teaching you what makes R tick.\nR packages teaches good software engineering practices for R, using packages for bundling, documenting, and testing your code."
  },
  {
    "objectID": "posts/nba_api_20230423/index.html",
    "href": "posts/nba_api_20230423/index.html",
    "title": "Using the NBA API in R",
    "section": "",
    "text": "nba_api is a Python client for accessing data from www.nba.com. This post presents an example of using nba_api to create a data viz. This example begins by using reticulate::import() to import nba_api. Before doing this, we must:\n\nInstall Python and configure R to use Python using the reticulate package;\nInstall nba_api in Python.\n\nA minimal working example for this setup would be useful. I do not have one, because my process involved the Anaconda GUI and so it is not reproducible.\nFor data viz, we use the nbaplotR package, which provides a ggplot2 geom for plotting NBA and WNBA logos. This package is not available on CRAN – the developer recommends installing from Github using pak::pak():\n\nif (!require(\"pak\")) install.packages(\"pak\")\npak::pak(\"mrcaseb/nbaplotR\")\n\n\n# Load R packages and Python modules ------\nlibrary(reticulate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(nbaplotR)\nnba_api &lt;- reticulate::import(\"nba_api\")\nLeagueDashTeamStats &lt;- nba_api$stats$endpoints$leaguedashteamstats$LeagueDashTeamStats\n\n# Pull and wrangle data from nba.com ------\nmy_df1 &lt;- LeagueDashTeamStats(\n  season = '2022-23',\n  season_type_all_star = 'Regular Season'\n)$get_data_frames()[[1]] %&gt;% \n  mutate(\n    TEAM_ABBR = valid_team_names(\"NBA\")[c(1, 3, 2, 4:25, 27, 26, 28:30)]\n  )\n\n# Plot data ------\nmy_ggobj &lt;- my_df1 %&gt;% \n  ggplot(aes(x = REB, y = PTS)) +\n  geom_nba_logos(\n    aes(team_abbr = TEAM_ABBR), \n    width = 0.075,\n    height = 0.075\n  ) +\n  theme_bw()\ngirafe(ggobj = my_ggobj)"
  },
  {
    "objectID": "posts/mastodon_api_20230821/index.html",
    "href": "posts/mastodon_api_20230821/index.html",
    "title": "Social Networking with the Mastodon API in R",
    "section": "",
    "text": "I recently created a Fosstodon account to engage with the #rstats community there. So it seemed only natural to use rtoot (spiritual successor to rtweet) to publish my first “toot”:\n\n# https://github.com/schochastics/rtoot\n# devtools::install_github(\"schochastics/rtoot\")\n# rtoot::auth_setup()\nrtoot::post_toot(status = \"my first rtoot #rstats\\n\n                 (published with the rtoot package: https://github.com/schochastics/rtoot)\",\n                 media = \"mastodon-logo.png\", \n                 alt_text = \"Mastodon logo\")\n\nIt worked!\n\n\n\nMy first toot, published with the `rtoot` package.\n\n\nA Mastodon thread could be published using Quarto and custom knitr hooks. Here is an example using rtweet – I will try to translate this to use rtoot instead."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Patrick Coyle",
    "section": "",
    "text": "Welcome to my personal webpage and data science blog. I am a statistician with an interest in R programming. I also cook sometimes and keep a photo journal of some of the things I make."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Advent of Code 2023\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\n  \n\n\n\n\nSocial Networking with the Mastodon API in R\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 21, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to mermaid.js\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 30, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\n  \n\n\n\n\nUsing the NBA API in R\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 23, 2023\n\n\nPatrick Coyle\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/aoc_20231211/index.html",
    "href": "posts/aoc_20231211/index.html",
    "title": "Advent of Code 2023",
    "section": "",
    "text": "My solutions to Advent of Code 2023 are published here."
  },
  {
    "objectID": "posts/mermaid_intro_20230430/index.html",
    "href": "posts/mermaid_intro_20230430/index.html",
    "title": "Introduction to mermaid.js",
    "section": "",
    "text": "mermaid.js is a Javascript library that allows you to create diagrams by writing “Markdown-ish syntax.” It has native support in Quarto:\n\ngraph LR\nA[Hard edge] --&gt; B(Round edge)\nB --&gt; C{Decision}\nC --&gt; D[Result one]\nC --&gt; E[Result two]\n\n\n\ngraph LR\nA[Hard edge] --&gt; B(Round edge)\nB --&gt; C{Decision}\nC --&gt; D[Result one]\nC --&gt; E[Result two]\n\n\n\n\n\nHere is mermaid template for the 2023 NBA Playoffs (excluding the play-in tournament)1\n\nlibrary(dplyr, warn.conflicts = FALSE) # to load the magrittr pipe\nmy_mmd &lt;- \"playoffs_template1.mmd\" %&gt;%\n  readLines(warn = F) \nmy_mmd %&gt;%\n  paste(collapse = \"\\n\") %&gt;%\n  DiagrammeR::mermaid()\n\n\n\n\n\nWe can progammatically edit this template with data about the teams and games:\n\nlibrary(readr)\nlibrary(stringr)\nseed_xwalk &lt;- read_csv(\"nba_2023_seed_xwalk.csv\", na = \"\")\nhelper1_20230423 &lt;- function (mmd) {\n  mmd[-1] %&gt;%\n  str_trim() %&gt;% \n  str_split(\" --&gt; \", simplify = T) %&gt;% \n  as_tibble() %&gt;% \n  setNames(c(\"From\", \"To\")) %&gt;% \n  left_join(seed_xwalk, by = c(\"From\" = \"seed\")) %&gt;% \n  transmute(\n    new_edges = paste0(\"  \", \n                       case_when(!is.na(team_stub) ~ team_stub, T ~ From), \n                       \" --&gt; \", \n                       To)\n  ) %&gt;% \n  pull(new_edges) %&gt;% \n  c(mmd[1], .) \n}\nmy_mmd %&gt;% \n  helper1_20230423() %&gt;% \n  paste(collapse = \"\\n\") %&gt;%\n  DiagrammeR::mermaid()\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nDiagrammeR::mermaid() does not appear to support every Mermaid diagram syntax, such as flowcharts. But the flowchart syntax can be manually entered into a Quarto mermaid code chunk.↩︎"
  },
  {
    "objectID": "rss_feed_aggregator.html",
    "href": "rss_feed_aggregator.html",
    "title": "RSS Feed Aggregator",
    "section": "",
    "text": "# https://medium.com/@vilcins/rss-feeds-for-your-github-releases-tags-and-activity-cbda2c51373\nlibrary(tidyRSS)\nlibrary(magrittr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(stringr)\n\nmy_feeds1 &lt;- c(\n  \"https://github.com/ropensci/targets/releases.atom\",\n  \"https://github.com/ropensci/tarchetypes/releases.atom\",\n  \"https://github.com/ropensci/gittargets/releases.atom\"\n)\nrss_tbl1 &lt;- my_feeds1 %&gt;% \n  purrr::map_dfr(tidyRSS::tidyfeed) %&gt;% \n  arrange(desc(entry_last_updated)) %&gt;% \n  transmute(\n    Date = lubridate::as_date(entry_last_updated), \n    Title = stringr::str_remove_all(feed_title, \"Release notes from\"), \n    entry_title, \n    entry_link\n  )\n\nGET request successful. Parsing...\n\n\nGET request successful. Parsing...\n\nGET request successful. Parsing...\n\nrss_tbl2 &lt;- tidyRSS::tidyfeed(\"https://www.tidyverse.org/index.xml\")\n\nGET request successful. Parsing...\n\nrss_tbl3 &lt;- tidyRSS::tidyfeed(\"https://albert-rapp.de/blog.xml\")\n\nGET request successful. Parsing...\n\n# %&gt;% \n#   arrange(desc(entry_last_updated)) %&gt;% \n#   transmute(\n#     Date = lubridate::as_date(entry_last_updated), \n#     Title = stringr::str_remove_all(feed_title, \"Release notes from\"), \n#     entry_title, \n#     entry_link\n#   )"
  }
]